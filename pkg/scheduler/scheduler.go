package scheduler

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/JyotinderSingh/task-queue/pkg/common"
	"github.com/jackc/pgx/v4/pgxpool"
)

// CommandRequest represents the structure of the request body
type CommandRequest struct {
	Command     string `json:"command"`
	ScheduledAt string `json:"scheduled_at"` // ISO 8601 format
}

type Task struct {
	Command     string
	ScheduledAt int64
}

// SchedulerServer represents an HTTP server that manages tasks.
type SchedulerServer struct {
	serverPort         string
	dbConnectionString string
	dbPool             *pgxpool.Pool
	ctx                context.Context
	cancel             context.CancelFunc
	httpServer         *http.Server
}

// NewServer creates and returns a new SchedulerServer.
func NewServer(port string, dbConnectionString string) *SchedulerServer {
	ctx, cancel := context.WithCancel(context.Background())
	return &SchedulerServer{
		serverPort:         port,
		dbConnectionString: dbConnectionString,
		ctx:                ctx,
		cancel:             cancel,
	}
}

// Start initializes and starts the SchedulerServer.
func (s *SchedulerServer) Start() error {
	var err error
	s.dbPool, err = common.ConnectToDatabase(s.ctx, s.dbConnectionString)
	if err != nil {
		return err
	}

	http.HandleFunc("/schedule", s.handlePostTask)
	s.httpServer = &http.Server{
		Addr: s.serverPort,
	}

	log.Printf("Starting scheduler server on %s\n", s.serverPort)

	// Start the server in a separate goroutine
	go func() {
		if err := s.httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Server error: %s\n", err)
		}
	}()

	// Return awaitShutdown
	return s.awaitShutdown()
}

// handlePostTask handles POST requests to add new tasks.
func (s *SchedulerServer) handlePostTask(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Only POST method is allowed", http.StatusMethodNotAllowed)
		return
	}

	// Decode the JSON body
	var commandReq CommandRequest
	if err := json.NewDecoder(r.Body).Decode(&commandReq); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// Parse the scheduled_at time
	scheduledTime, err := time.Parse(time.RFC3339, commandReq.ScheduledAt)
	if err != nil {
		http.Error(w, "Invalid date format. Use ISO 8601 format.", http.StatusBadRequest)
		return
	}

	// Convert the scheduled time to Unix timestamp
	unixTimestamp := scheduledTime.Unix()

	taskId, err := s.insertTaskIntoDB(context.Background(), Task{Command: commandReq.Command, ScheduledAt: unixTimestamp})

	if err != nil {
		http.Error(w, fmt.Sprintf("Failed to submit task. Error: %s", err.Error()),
			http.StatusInternalServerError)
		return
	}

	// Respond with the parsed data (for demonstration purposes)
	response := fmt.Sprintf("Command: %s\nScheduled At (Unix Timestamp): %d\nTask ID: %s",
		commandReq.Command, unixTimestamp, taskId)
	w.Write([]byte(response))
}

// insertTaskIntoDB inserts a new task into the tasks table and returns the autogenerated UUID.
func (s *SchedulerServer) insertTaskIntoDB(ctx context.Context, task Task) (string, error) {
	// Convert the Unix timestamp (int64) to time.Time in Go
	scheduledTime := time.Unix(task.ScheduledAt, 0)
	// SQL statement with RETURNING clause
	sqlStatement := "INSERT INTO tasks (command, scheduled_at) VALUES ($1, $2) RETURNING id"

	// Placeholder for the returned id
	var insertedId string

	// Execute the query and scan the returned id into the insertedId variable
	err := s.dbPool.QueryRow(ctx, sqlStatement, task.Command, scheduledTime).Scan(&insertedId)
	if err != nil {
		return "", err
	}

	// Return the autogenerated UUID
	return insertedId, nil
}

func (s *SchedulerServer) awaitShutdown() error {
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGTERM)
	<-stop

	return s.Stop()
}

// Stop gracefully shuts down the SchedulerServer and the database connection pool.
func (s *SchedulerServer) Stop() error {
	s.dbPool.Close()
	if s.httpServer != nil {
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		return s.httpServer.Shutdown(ctx)
	}
	log.Println("Scheduler server and database pool stopped")
	return nil
}
